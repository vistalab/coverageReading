%% run LiFE on data collected at the CNI
% save a copy of this script in each subject's directory
clear all; close all; clc; 
bookKeeping; 
dbstop if error

%% modify here

list_subInds = 2; 

% the comprehensive connectome. pdb file
% relative to dirDiffusion
connectomeComprehensiveDir = '';
connectomeComprehensiveName = 'fg_mrtrix_500000.pdb';

%% do things
for ii = list_subInds

    tic    
    % shared anatomy directory
    dirAnatomy = list_anatomy{ii};

    % subject's diffusion directory
    dirDiffusion = list_sessionDiffusionRun1{ii};
    dirDiffusionRun2 = list_sessionDiffusionRun2{ii};

    % paths to diffusion and anatomy data
    % we want the data that is aligned!
    % which should be kept in dti96trilin_runX_res2/bin/
    dwiFile = fullfile(dirDiffusion, 'dti_aligned_trilin.nii.gz');
    dwiFileRepeat = fullfile(dirDiffusionRun2,'dti_aligned_trilin.nii.gz'); 
    t1File  = fullfile(dirAnatomy, 't1.nii.gz');

    % full directory path of where to save optimized connectome
    saveDir = fullfile(dirDiffusion, connectomeComprehensiveDir);
    
    %% (1) Evaluate the Probabilistic CSD-based connectome.
    % We will analyze first the CSD-based probabilistic tractography
    % connectome.
    prob.tractography = 'Probabilistic';
    
    % Assumption. That the comprehensive connectome is stored in
    % dirDiffusion
    fgFileName = fullfile(dirDiffusion, connectomeComprehensiveDir, connectomeComprehensiveName);

    % Assumption. That we want:
    % The final connectome and data astructure will be saved with this name in
    % the same directory as the comprehensive connectome 
    feFileName    = fullfile(dirDiffusion, connectomeComprehensiveDir, ['LiFE-' connectomeComprehensiveName]);

    %% (1.1) Initialize the LiFE-BD model structure, 'fe' in the code below. 
    % This structure contains the forward model of diffusion based on the
    % tractography solution. It also contains all the information necessary to
    % compute model accuracry, and perform statistical tests. You can type
    % help('feBuildModel') in the MatLab prompt for more information.

    tic;
    N = 360; % Discretization parameter
    
    mycomputer = computer();
    release = version('-release');
    switch strcat(mycomputer,'_',release)
            case {'GLNXA64_2015a','MACI64_2014b'}
            fe = feConnectomeInit(dwiFile,fgFileName,feFileName,[],dwiFileRepeat,t1File,N,[1,0],0);
            otherwise
            sprintf('WARNING: currently LiFE is optimized for an efficient usage of memory \n using the Sparse Tucker Decomposition aproach (Caiafa&Pestilli, 2015) \n ONLY for Linux (MatlabR2015a) and MacOS (MatlabR2014b). \n If you have a different system or version you can still \n use the old version of LiFE (memory intensive). \n\n')
            sprintf('\n Starting building big matrix M in OLD LiFE...\n')
            fe = feConnectomeInit(dwiFile,fgFileName,feFileName,[],dwiFileRepeat,t1File,N,[1,0],1);
    end
    toc;

    %% (1.2) Fit the model (of the unlesioned whole brain connectome).
    % Hereafter we fit the forward model of tracrography using a least-squared
    % method. The information generated by fitting the model (fiber weights
    % etc) is then installed in the LiFE-BD structure.
    %
    % TODO break this down
    fe = feSet(fe,'fit',feFitModel(feGet(fe,'model'),feGet(fe,'dsigdemeaned'),'bbnnls'));
    
    % save the fe struct for the comprehensive connectome
    % assumption: save the fe struct in the same directory and with the
    % same name as the connectome it is run on
    chdir(saveDir);
    [~,baseName] = fileparts(connectomeComprehensiveName);
    save([baseName '_LiFEStruct.mat'], 'fe')
    
    %% (1.3) Extract the RMSE of the model on the fitted data set. 
    % We now use the LiFE-BD structure and the fit to compute the error in each
    % white-matter voxel spanned by the tractography model.
    prob.rmse   = feGet(fe,'vox rmse');


    
    
end